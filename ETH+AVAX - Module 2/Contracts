// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

contract Assessment {
    address public owner;
    string public ownerName;
    mapping(address => uint256) public balances;
    Transaction[] public transactionHistory;

    struct Transaction {
        address sender;
        uint256 amount;
        uint256 timeStamp;
    }

    event Deposit(address indexed account, uint256 amount);
    event Withdraw(address indexed account, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner of this account");
        _;
    }

    constructor(string memory _ownerName) {
        owner = msg.sender;
        ownerName = _ownerName;
    }

    function getBalance(address account) public view returns (uint256) {
        return balances[account];
    }

    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
        transactionHistory.push(Transaction(msg.sender, msg.value, block.timestamp));
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) public onlyOwner {
        require(amount > 0, "Withdraw amount must be greater than zero");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
        transactionHistory.push(Transaction(msg.sender, amount, block.timestamp));
        emit Withdraw(msg.sender, amount);
    }

    function getOwner() public view returns (address) {
        return owner;
    }

    function getOwnerName() public view returns (string memory) {
        return ownerName;
    }

    function getEventHistoryLength() public view returns (uint256) {
        return transactionHistory.length;
    }

    function getTransaction(uint256 index) public view returns (address, uint256, uint256) {
        require(index < transactionHistory.length, "Invalid index");
        Transaction memory transaction = transactionHistory[index];
        return (transaction.sender, transaction.amount, transaction.timeStamp);
    }

    function getAllTransactions() public view returns (Transaction[] memory) {
        return transactionHistory;
    }
}
