import React, { useState, useEffect } from "react";
import { ethers } from "ethers";
import atm_abi from "../artifacts/contracts/Assessment.sol/Assessment.json";

const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
const atmABI = atm_abi.abi;

const HomePage = () => {
  const [ethWallet, setEthWallet] = useState(undefined);
  const [selectedAccount, setSelectedAccount] = useState(undefined);
  const [atm, setATM] = useState(undefined);
  const [accounts, setAccounts] = useState([]);
  const [balance, setBalance] = useState(undefined);
  const [ownerName, setOwnerName] = useState(undefined);
  const [transactionHistory, setTransactionHistory] = useState([]);

  const getWallet = async () => {
    if (window.ethereum) {
      setEthWallet(window.ethereum);
    }

    if (ethWallet) {
      const accounts = await ethWallet.request({ method: "eth_accounts" });
      handleAccounts(accounts);
    }
  };

  const handleAccounts = (accounts) => {
    if (accounts && accounts.length > 0) {
      console.log("Account connected: ", accounts);
      setAccounts(accounts);
      setSelectedAccount(accounts[0]);
    } else {
      console.log("No account found");
      setAccounts([]);
      setSelectedAccount(undefined);
    }
  };

  const connectAccount = async () => {
    if (!ethWallet) {
      alert("MetaMask wallet is required to connect");
      return;
    }

    const accounts = await ethWallet.request({ method: "eth_requestAccounts" });
    handleAccounts(accounts);

    // once wallet is set we can get a reference to our deployed contract
    getATMContract();
  };

  const getATMContract = () => {
    const provider = new ethers.providers.Web3Provider(ethWallet);
    const signer = provider.getSigner();
    const atmContract = new ethers.Contract(contractAddress, atmABI, signer);

    setATM(atmContract);
  };

  const getBalance = async () => {
    if (atm) {
      console.log(atm);
      setBalance((await atm.getBalance()).toNumber());
    }
  };

  const getTransactionHistory = async () => {
    if (atm) {
      const historyLength = await atm.getEventHistoryLength();
      const history = [];
      for (let i = 0; i < historyLength; i++) {
        const transaction = await atm.getTransaction(i);

        const timestamp = transaction[2].toString();
        const date = new Date(timestamp * 1000);
        const formattedDate = date.toLocaleString();

        history.push({
          sender: transaction[0],
          amount: transaction[1].toString(),
          timestamp: formattedDate,
        });
      }
      setTransactionHistory(history);
    }
  };

  const getOwner = async () => {
    if (atm) {
      let tx = await atm.getOwner();
      setOwnerName(tx);
    }
  };

  const deposit = async () => {
    if (atm && selectedAccount) {
      let tx = await atm.deposit(1);
      await tx.wait();
      getBalance();
      getTransactionHistory();
    }
  };

  const withdraw = async () => {
    if (atm && selectedAccount) {
      let tx = await atm.withdraw(1);
      await tx.wait();
      getBalance();
      getTransactionHistory();
    }
  };

  useEffect(() => {
    getWallet();
    getOwner();
    getBalance();
    getTransactionHistory();
  }, []);

  return (
    <main className="container">
      <header>
        <h1 style={{ color: "red", fontFamily: "monospace" }}>
          Welcome to the Metacrafter's ATM!
        </h1>
      </header>
      <div>
        {selectedAccount ? (
          <p>Connected Account: {selectedAccount}</p>
        ) : (
          <button
            onClick={connectAccount}
            style={{
              height: "5vh",
              width: "20%",
              backgroundColor: "black",
              color: "white",
              borderRadius: "10px",
              cursor: "pointer",
              border: "0px",
              fontSize: "1rem",
            }}
          >
            Connect your MetaMask wallet
          </button>
        )}
      </div>
      <div>
        <h2>Account Balance: {balance} ETH</h2>
      </div>
      <div>
        <button
          style={{
            height: "6vh",
            width: "15%",
            margin: "5px 10px",
            backgroundColor: "green",
            color: "white",
            borderRadius: "5px",
            cursor: "pointer",
            border: "0px",
            fontSize: "1rem",
          }}
          onClick={deposit}
        >
          Deposit 1 ETH
        </button>
        <button
          style={{
            height: "6vh",
            width: "15%",
            margin: "5px 10px",
            backgroundColor: "red",
            color: "white",
            borderRadius: "5px",
            cursor: "pointer",
            border: "0px",
            fontSize: "1rem",
          }}
          onClick={withdraw}
        >
          Withdraw 1 ETH
        </button>
      </div>
      <div>
        <h2>Transaction History:</h2>
        {transactionHistory.map((transaction, index) => (
          <div key={index}>
            <p>Sender: {transaction.sender}</p>
            <p>Amount: {transaction.amount}</p>
            <p>Time: {transaction.timestamp}</p>
            <hr />
          </div>
        ))}
      </div>
      <div>
        <h2>Owner Name: {ownerName}</h2>
      </div>
      <style jsx>{`
        .container {
          text-align: center;
        }
      `}</style>
    </main>
  );
};

export default HomePage;

