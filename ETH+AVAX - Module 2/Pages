import { useState, useEffect } from "react";
import { ethers } from "ethers";
import atm_abi from "../artifacts/contracts/Assessment.sol/Assessment.json";

export default function HomePage() {
  // State variables
  const [ethWallet, setEthWallet] = useState(undefined);
  const [account, setAccount] = useState(undefined);
  const [atm, setATM] = useState(undefined);
  const [balance, setBalance] = useState(undefined);
  const [otherAccount, setOtherAccount] = useState("");
  const [otherAccountBalance, setOtherAccountBalance] = useState(undefined);
  const [transactionHistory, setTransactionHistory] = useState([]);

  // Contract address and ABI
  const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
  const atmABI = atm_abi.abi;

  // Function to set up the Metamask wallet
  const getWallet = async () => {
    if (window.ethereum) {
      setEthWallet(window.ethereum);
    }
  };

  // Function to handle connected account
  const handleAccount = (account) => {
    if (account) {
      console.log("Account connected: ", account);
      setAccount(account);
    } else {
      console.log("No account found");
    }
  };

  // Function to connect the Metamask wallet
  const connectAccount = async () => {
    if (!ethWallet) {
      alert("MetaMask wallet is required to connect");
      return;
    }

    const accounts = await ethWallet.request({ method: "eth_requestAccounts" });
    handleAccount(accounts);
  };

  // Function to get the ATM contract
  const getATMContract = () => {
    const provider = new ethers.providers.Web3Provider(ethWallet);
    const signer = provider.getSigner();
    const atmContract = new ethers.Contract(contractAddress, atmABI, signer);

    setATM(atmContract);
  };

  // Function to get the account balance
  const getBalance = async () => {
    if (atm) {
      setBalance((await atm.getBalance()).toNumber());
    }
  };

  // Function to get the balance of another account
  const checkOtherAccountBalance = async () => {
    if (!ethWallet) {
      alert("Please install Metamask in order to use this ATM.");
      return;
    }

    if (!otherAccount) {
      alert("Please enter another account address.");
      return;
    }

    try {
      const provider = new ethers.providers.Web3Provider(ethWallet);
      const contract = new ethers.Contract(contractAddress, atmABI, provider);

      const balance = await contract.balanceOf(otherAccount);
      setOtherAccountBalance(balance.toNumber());
    } catch (error) {
      console.error("Error fetching balance:", error);
      setOtherAccountBalance(undefined);
    }
  };

  // Function to deposit
  const deposit = async () => {
    if (atm) {
      let tx = await atm.deposit(1);
      await tx.wait();
      getBalance();
      addToTransactionHistory("Deposit", 1);
    }
  };

  // Function to withdraw
  const withdraw = async () => {
    if (atm) {
      let tx = await atm.withdraw(1);
      await tx.wait();
      getBalance();
      addToTransactionHistory("Withdrawal", -1);
    }
  };

  // Function to transactions history
  const addToTransactionHistory = (type, amount) => {
    setTransactionHistory((prevHistory) => [...prevHistory, { type, amount }]);
  };

  // Function to initialize the user and get the balance
  const initUser = () => {
    // Check to see if user has Metamask
    if (!ethWallet) {
      return <p>Please install Metamask in order to use this ATM.</p>;
    }

    // Check to see if user is connected. If not, connect to their account
    if (!account) {
      return (
        <button onClick={connectAccount}>Please connect your Metamask wallet</button>
      );
    }

    if (balance === undefined) {
      getBalance();
    }

    return (
      <div>
        <p>Your Account: {account}</p>
        <p>Your Balance: {balance}</p>
        <button onClick={deposit}>Deposit 1 ETH</button>
        <button onClick={withdraw}>Withdraw 1 ETH</button>

        <div>
          <input
            type="text"
            value={otherAccount}
            onChange={(e) => setOtherAccount(e.target.value)}
            placeholder="Enter another account address"
          />
          <button onClick={checkOtherAccountBalance}>Check Balance of Another Account</button>
          {otherAccountBalance !== undefined && (
            <p>
              Balance of {otherAccount}: {otherAccountBalance}
            </p>
          )}
        </div>

        <div>
          <h2>Transaction History</h2>
          <ul>
            {transactionHistory.map((transaction, index) => (
              <li key={index}>
                {transaction.type} - {transaction.amount} ETH
              </li>
            ))}
          </ul>
        </div>
      </div>
    );
  };

  useEffect(() => {
    getWallet();
  }, []);

  useEffect(() => {
    if (account) {
      // Once wallet is set and account is available, get a reference to the deployed contract
      getATMContract();
    }
  }, [account]);

  return (
    <main className="container">
      <header>
        <h1>HEY, WELCOME</h1>
        <p>what do you want to do here:</p>
      </header>
      {initUser()}
      <style jsx>
        {`
          .container {
            text-align: center;
            background-color: grey;
            background-size: cover;
            color: #fff;
            font-family: "Algerian", serif;
          }

          header {
            padding: 34px;
          }

          h1 {
            font-family: "Arial", serif;
            font-size: 70px;
            margin-bottom: 20px;
          }

          p {
            font-size: 22px;
            margin-bottom: 20px;
          }

          button {
            background-color: #4caf50;
            color: #fff;
            border: none;
            padding: 20px 30px;
            font-size: 20px;
            cursor: pointer;
          }

          button:hover {
            cursor: pointer;
          }
        `}
      </style>
    </main>
  );
}


